<?php
 namespace MailPoetVendor\Twig\Node\Expression; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Compiler; use MailPoetVendor\Twig\TwigFunction; class FunctionExpression extends \MailPoetVendor\Twig\Node\Expression\CallExpression { public function __construct($name, \MailPoetVendor\Twig_NodeInterface $arguments, $lineno) { parent::__construct(['arguments' => $arguments], ['name' => $name, 'is_defined_test' => \false], $lineno); } public function compile(\MailPoetVendor\Twig\Compiler $compiler) { $name = $this->getAttribute('name'); $function = $compiler->getEnvironment()->getFunction($name); $this->setAttribute('name', $name); $this->setAttribute('type', 'function'); $this->setAttribute('thing', $function); $this->setAttribute('needs_environment', $function->needsEnvironment()); $this->setAttribute('needs_context', $function->needsContext()); $this->setAttribute('arguments', $function->getArguments()); if ($function instanceof \MailPoetVendor\Twig_FunctionCallableInterface || $function instanceof \MailPoetVendor\Twig\TwigFunction) { $callable = $function->getCallable(); if ('constant' === $name && $this->getAttribute('is_defined_test')) { $callable = 'twig_constant_is_defined'; } $this->setAttribute('callable', $callable); } if ($function instanceof \MailPoetVendor\Twig\TwigFunction) { $this->setAttribute('is_variadic', $function->isVariadic()); } $this->compileCallable($compiler); } } \class_alias('MailPoetVendor\\Twig\\Node\\Expression\\FunctionExpression', 'MailPoetVendor\\Twig_Node_Expression_Function'); 