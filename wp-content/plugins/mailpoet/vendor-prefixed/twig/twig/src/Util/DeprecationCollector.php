<?php
 namespace MailPoetVendor\Twig\Util; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Environment; use MailPoetVendor\Twig\Error\SyntaxError; use MailPoetVendor\Twig\Source; class DeprecationCollector { private $twig; private $deprecations; public function __construct(\MailPoetVendor\Twig\Environment $twig) { $this->twig = $twig; } public function collectDir($dir, $ext = '.twig') { $iterator = new \RegexIterator(new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($dir), \RecursiveIteratorIterator::LEAVES_ONLY), '{' . \preg_quote($ext) . '$}'); return $this->collect(new \MailPoetVendor\Twig\Util\TemplateDirIterator($iterator)); } public function collect(\Traversable $iterator) { $this->deprecations = []; \set_error_handler([$this, 'errorHandler']); foreach ($iterator as $name => $contents) { try { $this->twig->parse($this->twig->tokenize(new \MailPoetVendor\Twig\Source($contents, $name))); } catch (\MailPoetVendor\Twig\Error\SyntaxError $e) { } } \restore_error_handler(); $deprecations = $this->deprecations; $this->deprecations = []; return $deprecations; } public function errorHandler($type, $msg) { if (\E_USER_DEPRECATED === $type) { $this->deprecations[] = $msg; } } } \class_alias('MailPoetVendor\\Twig\\Util\\DeprecationCollector', 'MailPoetVendor\\Twig_Util_DeprecationCollector'); 