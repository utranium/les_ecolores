<?php
 namespace MailPoetVendor\Twig\Extension; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\ExpressionParser; use MailPoetVendor\Twig\TokenParser\ApplyTokenParser; use MailPoetVendor\Twig\TokenParser\BlockTokenParser; use MailPoetVendor\Twig\TokenParser\DeprecatedTokenParser; use MailPoetVendor\Twig\TokenParser\DoTokenParser; use MailPoetVendor\Twig\TokenParser\EmbedTokenParser; use MailPoetVendor\Twig\TokenParser\ExtendsTokenParser; use MailPoetVendor\Twig\TokenParser\FilterTokenParser; use MailPoetVendor\Twig\TokenParser\FlushTokenParser; use MailPoetVendor\Twig\TokenParser\ForTokenParser; use MailPoetVendor\Twig\TokenParser\FromTokenParser; use MailPoetVendor\Twig\TokenParser\IfTokenParser; use MailPoetVendor\Twig\TokenParser\ImportTokenParser; use MailPoetVendor\Twig\TokenParser\IncludeTokenParser; use MailPoetVendor\Twig\TokenParser\MacroTokenParser; use MailPoetVendor\Twig\TokenParser\SetTokenParser; use MailPoetVendor\Twig\TokenParser\SpacelessTokenParser; use MailPoetVendor\Twig\TokenParser\UseTokenParser; use MailPoetVendor\Twig\TokenParser\WithTokenParser; use MailPoetVendor\Twig\TwigFilter; use MailPoetVendor\Twig\TwigFunction; use MailPoetVendor\Twig\TwigTest; class CoreExtension extends \MailPoetVendor\Twig\Extension\AbstractExtension { protected $dateFormats = ['F j, Y H:i', '%d days']; protected $numberFormat = [0, '.', ',']; protected $timezone = null; protected $escapers = []; public function setEscaper($strategy, $callable) { $this->escapers[$strategy] = $callable; } public function getEscapers() { return $this->escapers; } public function setDateFormat($format = null, $dateIntervalFormat = null) { if (null !== $format) { $this->dateFormats[0] = $format; } if (null !== $dateIntervalFormat) { $this->dateFormats[1] = $dateIntervalFormat; } } public function getDateFormat() { return $this->dateFormats; } public function setTimezone($timezone) { $this->timezone = $timezone instanceof \DateTimeZone ? $timezone : new \DateTimeZone($timezone); } public function getTimezone() { if (null === $this->timezone) { $this->timezone = new \DateTimeZone(\date_default_timezone_get()); } return $this->timezone; } public function setNumberFormat($decimal, $decimalPoint, $thousandSep) { $this->numberFormat = [$decimal, $decimalPoint, $thousandSep]; } public function getNumberFormat() { return $this->numberFormat; } public function getTokenParsers() { return [new \MailPoetVendor\Twig\TokenParser\ApplyTokenParser(), new \MailPoetVendor\Twig\TokenParser\ForTokenParser(), new \MailPoetVendor\Twig\TokenParser\IfTokenParser(), new \MailPoetVendor\Twig\TokenParser\ExtendsTokenParser(), new \MailPoetVendor\Twig\TokenParser\IncludeTokenParser(), new \MailPoetVendor\Twig\TokenParser\BlockTokenParser(), new \MailPoetVendor\Twig\TokenParser\UseTokenParser(), new \MailPoetVendor\Twig\TokenParser\FilterTokenParser(), new \MailPoetVendor\Twig\TokenParser\MacroTokenParser(), new \MailPoetVendor\Twig\TokenParser\ImportTokenParser(), new \MailPoetVendor\Twig\TokenParser\FromTokenParser(), new \MailPoetVendor\Twig\TokenParser\SetTokenParser(), new \MailPoetVendor\Twig\TokenParser\SpacelessTokenParser(), new \MailPoetVendor\Twig\TokenParser\FlushTokenParser(), new \MailPoetVendor\Twig\TokenParser\DoTokenParser(), new \MailPoetVendor\Twig\TokenParser\EmbedTokenParser(), new \MailPoetVendor\Twig\TokenParser\WithTokenParser(), new \MailPoetVendor\Twig\TokenParser\DeprecatedTokenParser()]; } public function getFilters() { $filters = [ new \MailPoetVendor\Twig\TwigFilter('date', '\\MailPoetVendor\\twig_date_format_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('date_modify', '\\MailPoetVendor\\twig_date_modify_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('format', 'sprintf'), new \MailPoetVendor\Twig\TwigFilter('replace', '\\MailPoetVendor\\twig_replace_filter'), new \MailPoetVendor\Twig\TwigFilter('number_format', '\\MailPoetVendor\\twig_number_format_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('abs', 'abs'), new \MailPoetVendor\Twig\TwigFilter('round', '\\MailPoetVendor\\twig_round'), new \MailPoetVendor\Twig\TwigFilter('url_encode', '\\MailPoetVendor\\twig_urlencode_filter'), new \MailPoetVendor\Twig\TwigFilter('json_encode', '\\MailPoetVendor\\twig_jsonencode_filter'), new \MailPoetVendor\Twig\TwigFilter('convert_encoding', '\\MailPoetVendor\\twig_convert_encoding'), new \MailPoetVendor\Twig\TwigFilter('title', '\\MailPoetVendor\\twig_title_string_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('capitalize', '\\MailPoetVendor\\twig_capitalize_string_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('upper', 'strtoupper'), new \MailPoetVendor\Twig\TwigFilter('lower', 'strtolower'), new \MailPoetVendor\Twig\TwigFilter('striptags', 'strip_tags'), new \MailPoetVendor\Twig\TwigFilter('trim', '\\MailPoetVendor\\twig_trim_filter'), new \MailPoetVendor\Twig\TwigFilter('nl2br', 'nl2br', ['pre_escape' => 'html', 'is_safe' => ['html']]), new \MailPoetVendor\Twig\TwigFilter('spaceless', '\\MailPoetVendor\\twig_spaceless', ['is_safe' => ['html']]), new \MailPoetVendor\Twig\TwigFilter('join', '\\MailPoetVendor\\twig_join_filter'), new \MailPoetVendor\Twig\TwigFilter('split', '\\MailPoetVendor\\twig_split_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('sort', '\\MailPoetVendor\\twig_sort_filter'), new \MailPoetVendor\Twig\TwigFilter('merge', '\\MailPoetVendor\\twig_array_merge'), new \MailPoetVendor\Twig\TwigFilter('batch', '\\MailPoetVendor\\twig_array_batch'), new \MailPoetVendor\Twig\TwigFilter('filter', '\\MailPoetVendor\\twig_array_filter'), new \MailPoetVendor\Twig\TwigFilter('map', '\\MailPoetVendor\\twig_array_map'), new \MailPoetVendor\Twig\TwigFilter('reduce', '\\MailPoetVendor\\twig_array_reduce'), new \MailPoetVendor\Twig\TwigFilter('reverse', '\\MailPoetVendor\\twig_reverse_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('length', '\\MailPoetVendor\\twig_length_filter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('slice', '\\MailPoetVendor\\twig_slice', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('first', '\\MailPoetVendor\\twig_first', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('last', '\\MailPoetVendor\\twig_last', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFilter('default', '\\MailPoetVendor\\_twig_default_filter', ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Filter\\DefaultFilter']), new \MailPoetVendor\Twig\TwigFilter('keys', '\\MailPoetVendor\\twig_get_array_keys_filter'), new \MailPoetVendor\Twig\TwigFilter('escape', '\\MailPoetVendor\\twig_escape_filter', ['needs_environment' => \true, 'is_safe_callback' => '\\MailPoetVendor\\twig_escape_filter_is_safe']), new \MailPoetVendor\Twig\TwigFilter('e', '\\MailPoetVendor\\twig_escape_filter', ['needs_environment' => \true, 'is_safe_callback' => '\\MailPoetVendor\\twig_escape_filter_is_safe']), ]; if (\function_exists('mb_get_info')) { $filters[] = new \MailPoetVendor\Twig\TwigFilter('upper', '\\MailPoetVendor\\twig_upper_filter', ['needs_environment' => \true]); $filters[] = new \MailPoetVendor\Twig\TwigFilter('lower', '\\MailPoetVendor\\twig_lower_filter', ['needs_environment' => \true]); } return $filters; } public function getFunctions() { return [new \MailPoetVendor\Twig\TwigFunction('max', 'max'), new \MailPoetVendor\Twig\TwigFunction('min', 'min'), new \MailPoetVendor\Twig\TwigFunction('range', 'range'), new \MailPoetVendor\Twig\TwigFunction('constant', '\\MailPoetVendor\\twig_constant'), new \MailPoetVendor\Twig\TwigFunction('cycle', '\\MailPoetVendor\\twig_cycle'), new \MailPoetVendor\Twig\TwigFunction('random', '\\MailPoetVendor\\twig_random', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFunction('date', '\\MailPoetVendor\\twig_date_converter', ['needs_environment' => \true]), new \MailPoetVendor\Twig\TwigFunction('include', 'twig_include', ['needs_environment' => \true, 'needs_context' => \true, 'is_safe' => ['all']]), new \MailPoetVendor\Twig\TwigFunction('source', '\\MailPoetVendor\\twig_source', ['needs_environment' => \true, 'is_safe' => ['all']])]; } public function getTests() { return [new \MailPoetVendor\Twig\TwigTest('even', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\EvenTest']), new \MailPoetVendor\Twig\TwigTest('odd', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\OddTest']), new \MailPoetVendor\Twig\TwigTest('defined', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\DefinedTest']), new \MailPoetVendor\Twig\TwigTest('sameas', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\SameasTest', 'deprecated' => '1.21', 'alternative' => 'same as']), new \MailPoetVendor\Twig\TwigTest('same as', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\SameasTest']), new \MailPoetVendor\Twig\TwigTest('none', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\NullTest']), new \MailPoetVendor\Twig\TwigTest('null', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\NullTest']), new \MailPoetVendor\Twig\TwigTest('divisibleby', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\DivisiblebyTest', 'deprecated' => '1.21', 'alternative' => 'divisible by']), new \MailPoetVendor\Twig\TwigTest('divisible by', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\DivisiblebyTest']), new \MailPoetVendor\Twig\TwigTest('constant', null, ['node_class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Test\\ConstantTest']), new \MailPoetVendor\Twig\TwigTest('empty', '\\MailPoetVendor\\twig_test_empty'), new \MailPoetVendor\Twig\TwigTest('iterable', '\\MailPoetVendor\\twig_test_iterable')]; } public function getOperators() { return [['not' => ['precedence' => 50, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Unary\\NotUnary'], '-' => ['precedence' => 500, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Unary\\NegUnary'], '+' => ['precedence' => 500, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Unary\\PosUnary']], ['or' => ['precedence' => 10, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\OrBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'and' => ['precedence' => 15, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\AndBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'b-or' => ['precedence' => 16, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\BitwiseOrBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'b-xor' => ['precedence' => 17, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\BitwiseXorBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'b-and' => ['precedence' => 18, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\BitwiseAndBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '==' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\EqualBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '!=' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\NotEqualBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '<' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\LessBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '>' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\GreaterBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '>=' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\GreaterEqualBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '<=' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\LessEqualBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'not in' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\NotInBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'in' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\InBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'matches' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\MatchesBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'starts with' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\StartsWithBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'ends with' => ['precedence' => 20, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\EndsWithBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '..' => ['precedence' => 25, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\RangeBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '+' => ['precedence' => 30, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\AddBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '-' => ['precedence' => 30, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\SubBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '~' => ['precedence' => 40, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\ConcatBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '*' => ['precedence' => 60, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\MulBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '/' => ['precedence' => 60, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\DivBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '//' => ['precedence' => 60, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\FloorDivBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '%' => ['precedence' => 60, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\ModBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'is' => ['precedence' => 100, 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], 'is not' => ['precedence' => 100, 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_LEFT], '**' => ['precedence' => 200, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\Binary\\PowerBinary', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_RIGHT], '??' => ['precedence' => 300, 'class' => 'MailPoetVendor\\Twig\\Node\\Expression\\NullCoalesceExpression', 'associativity' => \MailPoetVendor\Twig\ExpressionParser::OPERATOR_RIGHT]]]; } public function getName() { return 'core'; } } \class_alias('MailPoetVendor\\Twig\\Extension\\CoreExtension', 'MailPoetVendor\\Twig_Extension_Core'); namespace MailPoetVendor; use MailPoetVendor\Twig\Environment; use MailPoetVendor\Twig\Error\LoaderError; use MailPoetVendor\Twig\Error\RuntimeError; use MailPoetVendor\Twig\Loader\SourceContextLoaderInterface; use MailPoetVendor\Twig\Markup; use MailPoetVendor\Twig\Node\Expression\ConstantExpression; use MailPoetVendor\Twig\Node\Node; function twig_cycle($values, $position) { if (!\is_array($values) && !$values instanceof \ArrayAccess) { return $values; } return $values[$position % \count($values)]; } function twig_random(\MailPoetVendor\Twig\Environment $env, $values = null, $max = null) { if (null === $values) { return null === $max ? \mt_rand() : \mt_rand(0, $max); } if (\is_int($values) || \is_float($values)) { if (null === $max) { if ($values < 0) { $max = 0; $min = $values; } else { $max = $values; $min = 0; } } else { $min = $values; $max = $max; } return \mt_rand($min, $max); } if (\is_string($values)) { if ('' === $values) { return ''; } if (null !== ($charset = $env->getCharset())) { if ('UTF-8' !== $charset) { $values = \MailPoetVendor\twig_convert_encoding($values, 'UTF-8', $charset); } $values = \preg_split('/(?<!^)(?!$)/u', $values); if ('UTF-8' !== $charset) { foreach ($values as $i => $value) { $values[$i] = \MailPoetVendor\twig_convert_encoding($value, $charset, 'UTF-8'); } } } else { return $values[\mt_rand(0, \strlen($values) - 1)]; } } if (!\MailPoetVendor\twig_test_iterable($values)) { return $values; } $values = \MailPoetVendor\twig_to_array($values); if (0 === \count($values)) { throw new \MailPoetVendor\Twig\Error\RuntimeError('The random function cannot pick from an empty array.'); } return $values[\array_rand($values, 1)]; } function twig_date_format_filter(\MailPoetVendor\Twig\Environment $env, $date, $format = null, $timezone = null) { if (null === $format) { $formats = $env->getExtension('MailPoetVendor\\Twig\\Extension\\CoreExtension')->getDateFormat(); $format = $date instanceof \DateInterval ? $formats[1] : $formats[0]; } if ($date instanceof \DateInterval) { return $date->format($format); } return \MailPoetVendor\twig_date_converter($env, $date, $timezone)->format($format); } function twig_date_modify_filter(\MailPoetVendor\Twig\Environment $env, $date, $modifier) { $date = \MailPoetVendor\twig_date_converter($env, $date, \false); $resultDate = $date->modify($modifier); return null === $resultDate ? $date : $resultDate; } function twig_date_converter(\MailPoetVendor\Twig\Environment $env, $date = null, $timezone = null) { if (\false !== $timezone) { if (null === $timezone) { $timezone = $env->getExtension('MailPoetVendor\\Twig\\Extension\\CoreExtension')->getTimezone(); } elseif (!$timezone instanceof \DateTimeZone) { $timezone = new \DateTimeZone($timezone); } } if ($date instanceof \DateTimeImmutable) { return \false !== $timezone ? $date->setTimezone($timezone) : $date; } if ($date instanceof \DateTime || $date instanceof \DateTimeInterface) { $date = clone $date; if (\false !== $timezone) { $date->setTimezone($timezone); } return $date; } if (null === $date || 'now' === $date) { return new \DateTime($date, \false !== $timezone ? $timezone : $env->getExtension('MailPoetVendor\\Twig\\Extension\\CoreExtension')->getTimezone()); } $asString = (string) $date; if (\ctype_digit($asString) || !empty($asString) && '-' === $asString[0] && \ctype_digit(\substr($asString, 1))) { $date = new \DateTime('@' . $date); } else { $date = new \DateTime($date, $env->getExtension('MailPoetVendor\\Twig\\Extension\\CoreExtension')->getTimezone()); } if (\false !== $timezone) { $date->setTimezone($timezone); } return $date; } function twig_replace_filter($str, $from, $to = null) { if (\is_string($from) && \is_string($to)) { @\trigger_error('Using "replace" with character by character replacement is deprecated since version 1.22 and will be removed in Twig 2.0', \E_USER_DEPRECATED); return \strtr($str, $from, $to); } if (!\MailPoetVendor\twig_test_iterable($from)) { throw new \MailPoetVendor\Twig\Error\RuntimeError(\sprintf('The "replace" filter expects an array or "Traversable" as replace values, got "%s".', \is_object($from) ? \get_class($from) : \gettype($from))); } return \strtr($str, \MailPoetVendor\twig_to_array($from)); } function twig_round($value, $precision = 0, $method = 'common') { if ('common' == $method) { return \round($value, $precision); } if ('ceil' != $method && 'floor' != $method) { throw new \MailPoetVendor\Twig\Error\RuntimeError('The round filter only supports the "common", "ceil", and "floor" methods.'); } return $method($value * \pow(10, $precision)) / \pow(10, $precision); } function twig_number_format_filter(\MailPoetVendor\Twig\Environment $env, $number, $decimal = null, $decimalPoint = null, $thousandSep = null) { $defaults = $env->getExtension('MailPoetVendor\\Twig\\Extension\\CoreExtension')->getNumberFormat(); if (null === $decimal) { $decimal = $defaults[0]; } if (null === $decimalPoint) { $decimalPoint = $defaults[1]; } if (null === $thousandSep) { $thousandSep = $defaults[2]; } return \number_format((float) $number, $decimal, $decimalPoint, $thousandSep); } function twig_urlencode_filter($url) { if (\is_array($url)) { if (\defined('PHP_QUERY_RFC3986')) { return \http_build_query($url, '', '&', \PHP_QUERY_RFC3986); } return \http_build_query($url, '', '&'); } return \rawurlencode($url); } function twig_jsonencode_filter($value, $options = 0) { if ($value instanceof \MailPoetVendor\Twig\Markup) { $value = (string) $value; } elseif (\is_array($value)) { \array_walk_recursive($value, '\\MailPoetVendor\\_twig_markup2string'); } return \json_encode($value, $options); } function _twig_markup2string(&$value) { if ($value instanceof \MailPoetVendor\Twig\Markup) { $value = (string) $value; } } function twig_array_merge($arr1, $arr2) { if (!\MailPoetVendor\twig_test_iterable($arr1)) { throw new \MailPoetVendor\Twig\Error\RuntimeError(\sprintf('The merge filter only works with arrays or "Traversable", got "%s" as first argument.', \gettype($arr1))); } if (!\MailPoetVendor\twig_test_iterable($arr2)) { throw new \MailPoetVendor\Twig\Error\RuntimeError(\sprintf('The merge filter only works with arrays or "Traversable", got "%s" as second argument.', \gettype($arr2))); } return \array_merge(\MailPoetVendor\twig_to_array($arr1), \MailPoetVendor\twig_to_array($arr2)); } function twig_slice(\MailPoetVendor\Twig\Environment $env, $item, $start, $length = null, $preserveKeys = \false) { if ($item instanceof \Traversable) { while ($item instanceof \IteratorAggregate) { $item = $item->getIterator(); } if ($start >= 0 && $length >= 0 && $item instanceof \Iterator) { try { return \iterator_to_array(new \LimitIterator($item, $start, null === $length ? -1 : $length), $preserveKeys); } catch (\OutOfBoundsException $e) { return []; } } $item = \iterator_to_array($item, $preserveKeys); } if (\is_array($item)) { return \array_slice($item, $start, $length, $preserveKeys); } $item = (string) $item; if (\function_exists('mb_get_info') && null !== ($charset = $env->getCharset())) { return (string) \mb_substr($item, $start, null === $length ? \mb_strlen($item, $charset) - $start : $length, $charset); } return (string) (null === $length ? \substr($item, $start) : \substr($item, $start, $length)); } function twig_first(\MailPoetVendor\Twig\Environment $env, $item) { $elements = \MailPoetVendor\twig_slice($env, $item, 0, 1, \false); return \is_string($elements) ? $elements : \current($elements); } function twig_last(\MailPoetVendor\Twig\Environment $env, $item) { $elements = \MailPoetVendor\twig_slice($env, $item, -1, 1, \false); return \is_string($elements) ? $elements : \current($elements); } function twig_join_filter($value, $glue = '', $and = null) { if (!\MailPoetVendor\twig_test_iterable($value)) { $value = (array) $value; } $value = \MailPoetVendor\twig_to_array($value, \false); if (0 === \count($value)) { return ''; } if (null === $and || $and === $glue) { return \implode($glue, $value); } if (1 === \count($value)) { return $value[0]; } return \implode($glue, \array_slice($value, 0, -1)) . $and . $value[\count($value) - 1]; } function twig_split_filter(\MailPoetVendor\Twig\Environment $env, $value, $delimiter, $limit = null) { if (\strlen($delimiter) > 0) { return null === $limit ? \explode($delimiter, $value) : \explode($delimiter, $value, $limit); } if (!\function_exists('mb_get_info') || null === ($charset = $env->getCharset())) { return \str_split($value, null === $limit ? 1 : $limit); } if ($limit <= 1) { return \preg_split('/(?<!^)(?!$)/u', $value); } $length = \mb_strlen($value, $charset); if ($length < $limit) { return [$value]; } $r = []; for ($i = 0; $i < $length; $i += $limit) { $r[] = \mb_substr($value, $i, $limit, $charset); } return $r; } function _twig_default_filter($value, $default = '') { if (\MailPoetVendor\twig_test_empty($value)) { return $default; } return $value; } function twig_get_array_keys_filter($array) { if ($array instanceof \Traversable) { while ($array instanceof \IteratorAggregate) { $array = $array->getIterator(); } if ($array instanceof \Iterator) { $keys = []; $array->rewind(); while ($array->valid()) { $keys[] = $array->key(); $array->next(); } return $keys; } $keys = []; foreach ($array as $key => $item) { $keys[] = $key; } return $keys; } if (!\is_array($array)) { return []; } return \array_keys($array); } function twig_reverse_filter(\MailPoetVendor\Twig\Environment $env, $item, $preserveKeys = \false) { if ($item instanceof \Traversable) { return \array_reverse(\iterator_to_array($item), $preserveKeys); } if (\is_array($item)) { return \array_reverse($item, $preserveKeys); } if (null !== ($charset = $env->getCharset())) { $string = (string) $item; if ('UTF-8' !== $charset) { $item = \MailPoetVendor\twig_convert_encoding($string, 'UTF-8', $charset); } \preg_match_all('/./us', $item, $matches); $string = \implode('', \array_reverse($matches[0])); if ('UTF-8' !== $charset) { $string = \MailPoetVendor\twig_convert_encoding($string, $charset, 'UTF-8'); } return $string; } return \strrev((string) $item); } function twig_sort_filter($array) { if ($array instanceof \Traversable) { $array = \iterator_to_array($array); } elseif (!\is_array($array)) { throw new \MailPoetVendor\Twig\Error\RuntimeError(\sprintf('The sort filter only works with arrays or "Traversable", got "%s".', \gettype($array))); } \asort($array); return $array; } function twig_in_filter($value, $compare) { if ($value instanceof \MailPoetVendor\Twig\Markup) { $value = (string) $value; } if ($compare instanceof \MailPoetVendor\Twig\Markup) { $compare = (string) $compare; } if (\is_array($compare)) { return \in_array($value, $compare, \is_object($value) || \is_resource($value)); } elseif (\is_string($compare) && (\is_string($value) || \is_int($value) || \is_float($value))) { return '' === $value || \false !== \strpos($compare, (string) $value); } elseif ($compare instanceof \Traversable) { if (\is_object($value) || \is_resource($value)) { foreach ($compare as $item) { if ($item === $value) { return \true; } } } else { foreach ($compare as $item) { if ($item == $value) { return \true; } } } return \false; } return \false; } function twig_trim_filter($string, $characterMask = null, $side = 'both') { if (null === $characterMask) { $characterMask = " \t\n\r\0\v"; } switch ($side) { case 'both': return \trim($string, $characterMask); case 'left': return \ltrim($string, $characterMask); case 'right': return \rtrim($string, $characterMask); default: throw new \MailPoetVendor\Twig\Error\RuntimeError('Trimming side must be "left", "right" or "both".'); } } function twig_spaceless($content) { return \trim(\preg_replace('/>\\s+</', '><', $content)); } function twig_escape_filter(\MailPoetVendor\Twig\Environment $env, $string, $strategy = 'html', $charset = null, $autoescape = \false) { if ($autoescape && $string instanceof \MailPoetVendor\Twig\Markup) { return $string; } if (!\is_string($string)) { if (\is_object($string) && \method_exists($string, '__toString')) { $string = (string) $string; } elseif (\in_array($strategy, ['html', 'js', 'css', 'html_attr', 'url'])) { return $string; } } if ('' === $string) { return ''; } if (null === $charset) { $charset = $env->getCharset(); } switch ($strategy) { case 'html': static $htmlspecialcharsCharsets = ['ISO-8859-1' => \true, 'ISO8859-1' => \true, 'ISO-8859-15' => \true, 'ISO8859-15' => \true, 'utf-8' => \true, 'UTF-8' => \true, 'CP866' => \true, 'IBM866' => \true, '866' => \true, 'CP1251' => \true, 'WINDOWS-1251' => \true, 'WIN-1251' => \true, '1251' => \true, 'CP1252' => \true, 'WINDOWS-1252' => \true, '1252' => \true, 'KOI8-R' => \true, 'KOI8-RU' => \true, 'KOI8R' => \true, 'BIG5' => \true, '950' => \true, 'GB2312' => \true, '936' => \true, 'BIG5-HKSCS' => \true, 'SHIFT_JIS' => \true, 'SJIS' => \true, '932' => \true, 'EUC-JP' => \true, 'EUCJP' => \true, 'ISO8859-5' => \true, 'ISO-8859-5' => \true, 'MACROMAN' => \true]; if (isset($htmlspecialcharsCharsets[$charset])) { return \htmlspecialchars($string, \ENT_QUOTES | \ENT_SUBSTITUTE, $charset); } if (isset($htmlspecialcharsCharsets[\strtoupper($charset)])) { $htmlspecialcharsCharsets[$charset] = \true; return \htmlspecialchars($string, \ENT_QUOTES | \ENT_SUBSTITUTE, $charset); } $string = \MailPoetVendor\twig_convert_encoding($string, 'UTF-8', $charset); $string = \htmlspecialchars($string, \ENT_QUOTES | \ENT_SUBSTITUTE, 'UTF-8'); return \MailPoetVendor\twig_convert_encoding($string, $charset, 'UTF-8'); case 'js': if ('UTF-8' !== $charset) { $string = \MailPoetVendor\twig_convert_encoding($string, 'UTF-8', $charset); } if (!\preg_match('//u', $string)) { throw new \MailPoetVendor\Twig\Error\RuntimeError('The string to escape is not a valid UTF-8 string.'); } $string = \preg_replace_callback('#[^a-zA-Z0-9,\\._]#Su', '\\MailPoetVendor\\_twig_escape_js_callback', $string); if ('UTF-8' !== $charset) { $string = \MailPoetVendor\twig_convert_encoding($string, $charset, 'UTF-8'); } return $string; case 'css': if ('UTF-8' !== $charset) { $string = \MailPoetVendor\twig_convert_encoding($string, 'UTF-8', $charset); } if (!\preg_match('//u', $string)) { throw new \MailPoetVendor\Twig\Error\RuntimeError('The string to escape is not a valid UTF-8 string.'); } $string = \preg_replace_callback('#[^a-zA-Z0-9]#Su', '\\MailPoetVendor\\_twig_escape_css_callback', $string); if ('UTF-8' !== $charset) { $string = \MailPoetVendor\twig_convert_encoding($string, $charset, 'UTF-8'); } return $string; case 'html_attr': if ('UTF-8' !== $charset) { $string = \MailPoetVendor\twig_convert_encoding($string, 'UTF-8', $charset); } if (!\preg_match('//u', $string)) { throw new \MailPoetVendor\Twig\Error\RuntimeError('The string to escape is not a valid UTF-8 string.'); } $string = \preg_replace_callback('#[^a-zA-Z0-9,\\.\\-_]#Su', '\\MailPoetVendor\\_twig_escape_html_attr_callback', $string); if ('UTF-8' !== $charset) { $string = \MailPoetVendor\twig_convert_encoding($string, $charset, 'UTF-8'); } return $string; case 'url': return \rawurlencode($string); default: static $escapers; if (null === $escapers) { $escapers = $env->getExtension('MailPoetVendor\\Twig\\Extension\\CoreExtension')->getEscapers(); } if (isset($escapers[$strategy])) { return \call_user_func($escapers[$strategy], $env, $string, $charset); } $validStrategies = \implode(', ', \array_merge(['html', 'js', 'url', 'css', 'html_attr'], \array_keys($escapers))); throw new \MailPoetVendor\Twig\Error\RuntimeError(\sprintf('Invalid escaping strategy "%s" (valid ones: %s).', $strategy, $validStrategies)); } } function twig_escape_filter_is_safe(\MailPoetVendor\Twig\Node\Node $filterArgs) { foreach ($filterArgs as $arg) { if ($arg instanceof \MailPoetVendor\Twig\Node\Expression\ConstantExpression) { return [$arg->getAttribute('value')]; } return []; } return ['html']; } if (\function_exists('mb_convert_encoding')) { function twig_convert_encoding($string, $to, $from) { return \mb_convert_encoding($string, $to, $from); } } elseif (\function_exists('iconv')) { function twig_convert_encoding($string, $to, $from) { return \iconv($from, $to, $string); } } else { function twig_convert_encoding($string, $to, $from) { throw new \MailPoetVendor\Twig\Error\RuntimeError('No suitable convert encoding function (use UTF-8 as your encoding or install the iconv or mbstring extension).'); } } if (\function_exists('mb_ord')) { function twig_ord($string) { return \mb_ord($string, 'UTF-8'); } } else { function twig_ord($string) { $code = ($string = \unpack('C*', \substr($string, 0, 4))) ? $string[1] : 0; if (0xf0 <= $code) { return ($code - 0xf0 << 18) + ($string[2] - 0x80 << 12) + ($string[3] - 0x80 << 6) + $string[4] - 0x80; } if (0xe0 <= $code) { return ($code - 0xe0 << 12) + ($string[2] - 0x80 << 6) + $string[3] - 0x80; } if (0xc0 <= $code) { return ($code - 0xc0 << 6) + $string[2] - 0x80; } return $code; } } function _twig_escape_js_callback($matches) { $char = $matches[0]; static $shortMap = ['\\' => '\\\\', '/' => '\\/', "\10" => '\\b', "\f" => '\\f', "\n" => '\\n', "\r" => '\\r', "\t" => '\\t']; if (isset($shortMap[$char])) { return $shortMap[$char]; } $char = \MailPoetVendor\twig_convert_encoding($char, 'UTF-16BE', 'UTF-8'); $char = \strtoupper(\bin2hex($char)); if (4 >= \strlen($char)) { return \sprintf('\\u%04s', $char); } return \sprintf('\\u%04s\\u%04s', \substr($char, 0, -4), \substr($char, -4)); } function _twig_escape_css_callback($matches) { $char = $matches[0]; return \sprintf('\\%X ', 1 === \strlen($char) ? \ord($char) : \MailPoetVendor\twig_ord($char)); } function _twig_escape_html_attr_callback($matches) { $chr = $matches[0]; $ord = \ord($chr); if ($ord <= 0x1f && "\t" != $chr && "\n" != $chr && "\r" != $chr || $ord >= 0x7f && $ord <= 0x9f) { return '&#xFFFD;'; } if (1 == \strlen($chr)) { static $entityMap = [ 34 => '&quot;', 38 => '&amp;', 60 => '&lt;', 62 => '&gt;', ]; if (isset($entityMap[$ord])) { return $entityMap[$ord]; } return \sprintf('&#x%02X;', $ord); } return \sprintf('&#x%04X;', \MailPoetVendor\twig_ord($chr)); } if (\function_exists('mb_get_info')) { function twig_length_filter(\MailPoetVendor\Twig\Environment $env, $thing) { if (null === $thing) { return 0; } if (\is_scalar($thing)) { return \mb_strlen($thing, $env->getCharset()); } if ($thing instanceof \Countable || \is_array($thing) || $thing instanceof \SimpleXMLElement) { return \count($thing); } if ($thing instanceof \Traversable) { return \iterator_count($thing); } if (\is_object($thing) && \method_exists($thing, '__toString')) { return \mb_strlen((string) $thing, $env->getCharset()); } return 1; } function twig_upper_filter(\MailPoetVendor\Twig\Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return \mb_strtoupper($string, $charset); } return \strtoupper($string); } function twig_lower_filter(\MailPoetVendor\Twig\Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return \mb_strtolower($string, $charset); } return \strtolower($string); } function twig_title_string_filter(\MailPoetVendor\Twig\Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return \mb_convert_case($string, \MB_CASE_TITLE, $charset); } return \ucwords(\strtolower($string)); } function twig_capitalize_string_filter(\MailPoetVendor\Twig\Environment $env, $string) { if (null !== ($charset = $env->getCharset())) { return \mb_strtoupper(\mb_substr($string, 0, 1, $charset), $charset) . \mb_strtolower(\mb_substr($string, 1, \mb_strlen($string, $charset), $charset), $charset); } return \ucfirst(\strtolower($string)); } } else { function twig_length_filter(\MailPoetVendor\Twig\Environment $env, $thing) { if (null === $thing) { return 0; } if (\is_scalar($thing)) { return \strlen($thing); } if ($thing instanceof \SimpleXMLElement) { return \count($thing); } if (\is_object($thing) && \method_exists($thing, '__toString') && !$thing instanceof \Countable) { return \strlen((string) $thing); } if ($thing instanceof \Countable || \is_array($thing)) { return \count($thing); } if ($thing instanceof \IteratorAggregate) { return \iterator_count($thing); } return 1; } function twig_title_string_filter(\MailPoetVendor\Twig\Environment $env, $string) { return \ucwords(\strtolower($string)); } function twig_capitalize_string_filter(\MailPoetVendor\Twig\Environment $env, $string) { return \ucfirst(\strtolower($string)); } } function twig_ensure_traversable($seq) { if ($seq instanceof \Traversable || \is_array($seq)) { return $seq; } return []; } function twig_to_array($seq, $preserveKeys = \true) { if ($seq instanceof \Traversable) { return \iterator_to_array($seq, $preserveKeys); } if (!\is_array($seq)) { return $seq; } return $preserveKeys ? $seq : \array_values($seq); } function twig_test_empty($value) { if ($value instanceof \Countable) { return 0 == \count($value); } if ($value instanceof \Traversable) { return !\iterator_count($value); } if (\is_object($value) && \method_exists($value, '__toString')) { return '' === (string) $value; } return '' === $value || \false === $value || null === $value || [] === $value; } function twig_test_iterable($value) { return $value instanceof \Traversable || \is_array($value); } function twig_include(\MailPoetVendor\Twig\Environment $env, $context, $template, $variables = [], $withContext = \true, $ignoreMissing = \false, $sandboxed = \false) { $alreadySandboxed = \false; $sandbox = null; if ($withContext) { $variables = \array_merge($context, $variables); } if ($isSandboxed = $sandboxed && $env->hasExtension('MailPoetVendor\\Twig\\Extension\\SandboxExtension')) { $sandbox = $env->getExtension('MailPoetVendor\\Twig\\Extension\\SandboxExtension'); if (!($alreadySandboxed = $sandbox->isSandboxed())) { $sandbox->enableSandbox(); } } $loaded = null; try { $loaded = $env->resolveTemplate($template); } catch (\MailPoetVendor\Twig\Error\LoaderError $e) { if (!$ignoreMissing) { if ($isSandboxed && !$alreadySandboxed) { $sandbox->disableSandbox(); } throw $e; } } catch (\Throwable $e) { if ($isSandboxed && !$alreadySandboxed) { $sandbox->disableSandbox(); } throw $e; } catch (\Exception $e) { if ($isSandboxed && !$alreadySandboxed) { $sandbox->disableSandbox(); } throw $e; } try { $ret = $loaded ? $loaded->render($variables) : ''; } catch (\Exception $e) { if ($isSandboxed && !$alreadySandboxed) { $sandbox->disableSandbox(); } throw $e; } if ($isSandboxed && !$alreadySandboxed) { $sandbox->disableSandbox(); } return $ret; } function twig_source(\MailPoetVendor\Twig\Environment $env, $name, $ignoreMissing = \false) { $loader = $env->getLoader(); try { if (!$loader instanceof \MailPoetVendor\Twig\Loader\SourceContextLoaderInterface) { return $loader->getSource($name); } else { return $loader->getSourceContext($name)->getCode(); } } catch (\MailPoetVendor\Twig\Error\LoaderError $e) { if (!$ignoreMissing) { throw $e; } } } function twig_constant($constant, $object = null) { if (null !== $object) { $constant = \get_class($object) . '::' . $constant; } return \constant($constant); } function twig_constant_is_defined($constant, $object = null) { if (null !== $object) { $constant = \get_class($object) . '::' . $constant; } return \defined($constant); } function twig_array_batch($items, $size, $fill = null, $preserveKeys = \true) { if (!\MailPoetVendor\twig_test_iterable($items)) { throw new \MailPoetVendor\Twig\Error\RuntimeError(\sprintf('The "batch" filter expects an array or "Traversable", got "%s".', \is_object($items) ? \get_class($items) : \gettype($items))); } $size = \ceil($size); $result = \array_chunk(\MailPoetVendor\twig_to_array($items, $preserveKeys), $size, $preserveKeys); if (null !== $fill && $result) { $last = \count($result) - 1; if ($fillCount = $size - \count($result[$last])) { for ($i = 0; $i < $fillCount; ++$i) { $result[$last][] = $fill; } } } return $result; } function twig_array_filter($array, $arrow) { if (\is_array($array)) { if (\PHP_VERSION_ID >= 50600) { return \array_filter($array, $arrow, \ARRAY_FILTER_USE_BOTH); } return \array_filter($array, $arrow); } return new \CallbackFilterIterator(new \IteratorIterator($array), $arrow); } function twig_array_map($array, $arrow) { $r = []; foreach ($array as $k => $v) { $r[$k] = $arrow($v, $k); } return $r; } function twig_array_reduce($array, $arrow, $initial = null) { if (!\is_array($array)) { $array = \iterator_to_array($array); } return \array_reduce($array, $arrow, $initial); } 