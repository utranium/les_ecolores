<?php
 namespace MailPoetVendor\Twig\TokenParser; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Node\BlockNode; use MailPoetVendor\Twig\Node\Expression\BlockReferenceExpression; use MailPoetVendor\Twig\Node\Expression\ConstantExpression; use MailPoetVendor\Twig\Node\PrintNode; use MailPoetVendor\Twig\Token; class FilterTokenParser extends \MailPoetVendor\Twig\TokenParser\AbstractTokenParser { public function parse(\MailPoetVendor\Twig\Token $token) { $name = $this->parser->getVarName(); $ref = new \MailPoetVendor\Twig\Node\Expression\BlockReferenceExpression(new \MailPoetVendor\Twig\Node\Expression\ConstantExpression($name, $token->getLine()), null, $token->getLine(), $this->getTag()); $filter = $this->parser->getExpressionParser()->parseFilterExpressionRaw($ref, $this->getTag()); $this->parser->getStream()->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); $body = $this->parser->subparse([$this, 'decideBlockEnd'], \true); $this->parser->getStream()->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); $block = new \MailPoetVendor\Twig\Node\BlockNode($name, $body, $token->getLine()); $this->parser->setBlock($name, $block); return new \MailPoetVendor\Twig\Node\PrintNode($filter, $token->getLine(), $this->getTag()); } public function decideBlockEnd(\MailPoetVendor\Twig\Token $token) { return $token->test('endfilter'); } public function getTag() { return 'filter'; } } \class_alias('MailPoetVendor\\Twig\\TokenParser\\FilterTokenParser', 'MailPoetVendor\\Twig_TokenParser_Filter'); 