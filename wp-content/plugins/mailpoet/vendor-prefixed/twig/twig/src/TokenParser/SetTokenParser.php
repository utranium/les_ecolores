<?php
 namespace MailPoetVendor\Twig\TokenParser; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Error\SyntaxError; use MailPoetVendor\Twig\Node\SetNode; use MailPoetVendor\Twig\Token; class SetTokenParser extends \MailPoetVendor\Twig\TokenParser\AbstractTokenParser { public function parse(\MailPoetVendor\Twig\Token $token) { $lineno = $token->getLine(); $stream = $this->parser->getStream(); $names = $this->parser->getExpressionParser()->parseAssignmentExpression(); $capture = \false; if ($stream->nextIf(\MailPoetVendor\Twig\Token::OPERATOR_TYPE, '=')) { $values = $this->parser->getExpressionParser()->parseMultitargetExpression(); $stream->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); if (\count($names) !== \count($values)) { throw new \MailPoetVendor\Twig\Error\SyntaxError('When using set, you must have the same number of variables and assignments.', $stream->getCurrent()->getLine(), $stream->getSourceContext()); } } else { $capture = \true; if (\count($names) > 1) { throw new \MailPoetVendor\Twig\Error\SyntaxError('When using set with a block, you cannot have a multi-target.', $stream->getCurrent()->getLine(), $stream->getSourceContext()); } $stream->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); $values = $this->parser->subparse([$this, 'decideBlockEnd'], \true); $stream->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); } return new \MailPoetVendor\Twig\Node\SetNode($capture, $names, $values, $lineno, $this->getTag()); } public function decideBlockEnd(\MailPoetVendor\Twig\Token $token) { return $token->test('endset'); } public function getTag() { return 'set'; } } \class_alias('MailPoetVendor\\Twig\\TokenParser\\SetTokenParser', 'MailPoetVendor\\Twig_TokenParser_Set'); 