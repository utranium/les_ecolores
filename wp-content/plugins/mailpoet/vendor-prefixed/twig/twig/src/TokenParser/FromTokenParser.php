<?php
 namespace MailPoetVendor\Twig\TokenParser; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Error\SyntaxError; use MailPoetVendor\Twig\Node\Expression\AssignNameExpression; use MailPoetVendor\Twig\Node\ImportNode; use MailPoetVendor\Twig\Token; class FromTokenParser extends \MailPoetVendor\Twig\TokenParser\AbstractTokenParser { public function parse(\MailPoetVendor\Twig\Token $token) { $macro = $this->parser->getExpressionParser()->parseExpression(); $stream = $this->parser->getStream(); $stream->expect(\MailPoetVendor\Twig\Token::NAME_TYPE, 'import'); $targets = []; do { $name = $stream->expect(\MailPoetVendor\Twig\Token::NAME_TYPE)->getValue(); $alias = $name; if ($stream->nextIf('as')) { $alias = $stream->expect(\MailPoetVendor\Twig\Token::NAME_TYPE)->getValue(); } $targets[$name] = $alias; if (!$stream->nextIf(\MailPoetVendor\Twig\Token::PUNCTUATION_TYPE, ',')) { break; } } while (\true); $stream->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); $var = new \MailPoetVendor\Twig\Node\Expression\AssignNameExpression($this->parser->getVarName(), $token->getLine()); $node = new \MailPoetVendor\Twig\Node\ImportNode($macro, $var, $token->getLine(), $this->getTag()); foreach ($targets as $name => $alias) { if ($this->parser->isReservedMacroName($name)) { throw new \MailPoetVendor\Twig\Error\SyntaxError(\sprintf('"%s" cannot be an imported macro as it is a reserved keyword.', $name), $token->getLine(), $stream->getSourceContext()); } $this->parser->addImportedSymbol('function', $alias, 'get' . $name, $var); } return $node; } public function getTag() { return 'from'; } } \class_alias('MailPoetVendor\\Twig\\TokenParser\\FromTokenParser', 'MailPoetVendor\\Twig_TokenParser_From'); 