<?php
 namespace MailPoetVendor\Twig\TokenParser; if (!defined('ABSPATH')) exit; use MailPoetVendor\Twig\Node\WithNode; use MailPoetVendor\Twig\Token; class WithTokenParser extends \MailPoetVendor\Twig\TokenParser\AbstractTokenParser { public function parse(\MailPoetVendor\Twig\Token $token) { $stream = $this->parser->getStream(); $variables = null; $only = \false; if (!$stream->test(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE)) { $variables = $this->parser->getExpressionParser()->parseExpression(); $only = $stream->nextIf(\MailPoetVendor\Twig\Token::NAME_TYPE, 'only'); } $stream->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); $body = $this->parser->subparse([$this, 'decideWithEnd'], \true); $stream->expect(\MailPoetVendor\Twig\Token::BLOCK_END_TYPE); return new \MailPoetVendor\Twig\Node\WithNode($body, $variables, $only, $token->getLine(), $this->getTag()); } public function decideWithEnd(\MailPoetVendor\Twig\Token $token) { return $token->test('endwith'); } public function getTag() { return 'with'; } } \class_alias('MailPoetVendor\\Twig\\TokenParser\\WithTokenParser', 'MailPoetVendor\\Twig_TokenParser_With'); 