<?php
 namespace MailPoetVendor\Symfony\Component\Translation; if (!defined('ABSPATH')) exit; use MailPoetVendor\Psr\Log\LoggerInterface; use MailPoetVendor\Symfony\Component\Translation\Exception\InvalidArgumentException; class LoggingTranslator implements \MailPoetVendor\Symfony\Component\Translation\TranslatorInterface, \MailPoetVendor\Symfony\Component\Translation\TranslatorBagInterface { private $translator; private $logger; public function __construct(\MailPoetVendor\Symfony\Component\Translation\TranslatorInterface $translator, \MailPoetVendor\Psr\Log\LoggerInterface $logger) { if (!$translator instanceof \MailPoetVendor\Symfony\Component\Translation\TranslatorBagInterface) { throw new \MailPoetVendor\Symfony\Component\Translation\Exception\InvalidArgumentException(\sprintf('The Translator "%s" must implement TranslatorInterface and TranslatorBagInterface.', \get_class($translator))); } $this->translator = $translator; $this->logger = $logger; } public function trans($id, array $parameters = [], $domain = null, $locale = null) { $trans = $this->translator->trans($id, $parameters, $domain, $locale); $this->log($id, $domain, $locale); return $trans; } public function transChoice($id, $number, array $parameters = [], $domain = null, $locale = null) { $trans = $this->translator->transChoice($id, $number, $parameters, $domain, $locale); $this->log($id, $domain, $locale); return $trans; } public function setLocale($locale) { $this->translator->setLocale($locale); } public function getLocale() { return $this->translator->getLocale(); } public function getCatalogue($locale = null) { return $this->translator->getCatalogue($locale); } public function getFallbackLocales() { if ($this->translator instanceof \MailPoetVendor\Symfony\Component\Translation\Translator || \method_exists($this->translator, 'getFallbackLocales')) { return $this->translator->getFallbackLocales(); } return []; } public function __call($method, $args) { return \call_user_func_array([$this->translator, $method], $args); } private function log($id, $domain, $locale) { if (null === $domain) { $domain = 'messages'; } $id = (string) $id; $catalogue = $this->translator->getCatalogue($locale); if ($catalogue->defines($id, $domain)) { return; } if ($catalogue->has($id, $domain)) { $this->logger->debug('Translation use fallback catalogue.', ['id' => $id, 'domain' => $domain, 'locale' => $catalogue->getLocale()]); } else { $this->logger->warning('Translation not found.', ['id' => $id, 'domain' => $domain, 'locale' => $catalogue->getLocale()]); } } } 