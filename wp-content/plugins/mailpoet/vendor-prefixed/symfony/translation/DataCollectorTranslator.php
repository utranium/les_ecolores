<?php
 namespace MailPoetVendor\Symfony\Component\Translation; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\HttpKernel\CacheWarmer\WarmableInterface; use MailPoetVendor\Symfony\Component\Translation\Exception\InvalidArgumentException; class DataCollectorTranslator implements \MailPoetVendor\Symfony\Component\Translation\TranslatorInterface, \MailPoetVendor\Symfony\Component\Translation\TranslatorBagInterface, \MailPoetVendor\Symfony\Component\HttpKernel\CacheWarmer\WarmableInterface { const MESSAGE_DEFINED = 0; const MESSAGE_MISSING = 1; const MESSAGE_EQUALS_FALLBACK = 2; private $translator; private $messages = []; public function __construct(\MailPoetVendor\Symfony\Component\Translation\TranslatorInterface $translator) { if (!$translator instanceof \MailPoetVendor\Symfony\Component\Translation\TranslatorBagInterface) { throw new \MailPoetVendor\Symfony\Component\Translation\Exception\InvalidArgumentException(\sprintf('The Translator "%s" must implement TranslatorInterface and TranslatorBagInterface.', \get_class($translator))); } $this->translator = $translator; } public function trans($id, array $parameters = [], $domain = null, $locale = null) { $trans = $this->translator->trans($id, $parameters, $domain, $locale); $this->collectMessage($locale, $domain, $id, $trans, $parameters); return $trans; } public function transChoice($id, $number, array $parameters = [], $domain = null, $locale = null) { $trans = $this->translator->transChoice($id, $number, $parameters, $domain, $locale); $this->collectMessage($locale, $domain, $id, $trans, $parameters, $number); return $trans; } public function setLocale($locale) { $this->translator->setLocale($locale); } public function getLocale() { return $this->translator->getLocale(); } public function getCatalogue($locale = null) { return $this->translator->getCatalogue($locale); } public function warmUp($cacheDir) { if ($this->translator instanceof \MailPoetVendor\Symfony\Component\HttpKernel\CacheWarmer\WarmableInterface) { $this->translator->warmUp($cacheDir); } } public function getFallbackLocales() { if ($this->translator instanceof \MailPoetVendor\Symfony\Component\Translation\Translator || \method_exists($this->translator, 'getFallbackLocales')) { return $this->translator->getFallbackLocales(); } return []; } public function __call($method, $args) { return \call_user_func_array([$this->translator, $method], $args); } public function getCollectedMessages() { return $this->messages; } private function collectMessage($locale, $domain, $id, $translation, $parameters = [], $number = null) { if (null === $domain) { $domain = 'messages'; } $id = (string) $id; $catalogue = $this->translator->getCatalogue($locale); $locale = $catalogue->getLocale(); $fallbackLocale = null; if ($catalogue->defines($id, $domain)) { $state = self::MESSAGE_DEFINED; } elseif ($catalogue->has($id, $domain)) { $state = self::MESSAGE_EQUALS_FALLBACK; $fallbackCatalogue = $catalogue->getFallbackCatalogue(); while ($fallbackCatalogue) { if ($fallbackCatalogue->defines($id, $domain)) { $fallbackLocale = $fallbackCatalogue->getLocale(); break; } $fallbackCatalogue = $fallbackCatalogue->getFallbackCatalogue(); } } else { $state = self::MESSAGE_MISSING; } $this->messages[] = ['locale' => $locale, 'fallbackLocale' => $fallbackLocale, 'domain' => $domain, 'id' => $id, 'translation' => $translation, 'parameters' => $parameters, 'transChoiceNumber' => $number, 'state' => $state]; } } 