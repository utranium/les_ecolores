<?php
 namespace MailPoetVendor\Symfony\Component\Validator\Context; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\Translation\TranslatorInterface; use MailPoetVendor\Symfony\Component\Validator\Constraint; use MailPoetVendor\Symfony\Component\Validator\ConstraintViolation; use MailPoetVendor\Symfony\Component\Validator\ConstraintViolationList; use MailPoetVendor\Symfony\Component\Validator\Mapping\ClassMetadataInterface; use MailPoetVendor\Symfony\Component\Validator\Mapping\MemberMetadata; use MailPoetVendor\Symfony\Component\Validator\Mapping\MetadataInterface; use MailPoetVendor\Symfony\Component\Validator\Mapping\PropertyMetadataInterface; use MailPoetVendor\Symfony\Component\Validator\Util\PropertyPath; use MailPoetVendor\Symfony\Component\Validator\Validator\ValidatorInterface; use MailPoetVendor\Symfony\Component\Validator\Violation\ConstraintViolationBuilder; class ExecutionContext implements \MailPoetVendor\Symfony\Component\Validator\Context\ExecutionContextInterface { private $validator; private $root; private $translator; private $translationDomain; private $violations; private $value; private $object; private $propertyPath = ''; private $metadata; private $group; private $constraint; private $validatedObjects = []; private $validatedConstraints = []; private $initializedObjects; public function __construct(\MailPoetVendor\Symfony\Component\Validator\Validator\ValidatorInterface $validator, $root, \MailPoetVendor\Symfony\Component\Translation\TranslatorInterface $translator, $translationDomain = null) { $this->validator = $validator; $this->root = $root; $this->translator = $translator; $this->translationDomain = $translationDomain; $this->violations = new \MailPoetVendor\Symfony\Component\Validator\ConstraintViolationList(); } public function setNode($value, $object, \MailPoetVendor\Symfony\Component\Validator\Mapping\MetadataInterface $metadata = null, $propertyPath) { $this->value = $value; $this->object = $object; $this->metadata = $metadata; $this->propertyPath = (string) $propertyPath; } public function setGroup($group) { $this->group = $group; } public function setConstraint(\MailPoetVendor\Symfony\Component\Validator\Constraint $constraint) { $this->constraint = $constraint; } public function addViolation($message, array $parameters = []) { $this->violations->add(new \MailPoetVendor\Symfony\Component\Validator\ConstraintViolation($this->translator->trans($message, $parameters, $this->translationDomain), $message, $parameters, $this->root, $this->propertyPath, $this->value, null, null, $this->constraint)); } public function buildViolation($message, array $parameters = []) { return new \MailPoetVendor\Symfony\Component\Validator\Violation\ConstraintViolationBuilder($this->violations, $this->constraint, $message, $parameters, $this->root, $this->propertyPath, $this->value, $this->translator, $this->translationDomain); } public function getViolations() { return $this->violations; } public function getValidator() { return $this->validator; } public function getRoot() { return $this->root; } public function getValue() { return $this->value; } public function getObject() { return $this->object; } public function getMetadata() { return $this->metadata; } public function getGroup() { return $this->group; } public function getConstraint() { return $this->constraint; } public function getClassName() { return $this->metadata instanceof \MailPoetVendor\Symfony\Component\Validator\Mapping\MemberMetadata || $this->metadata instanceof \MailPoetVendor\Symfony\Component\Validator\Mapping\ClassMetadataInterface ? $this->metadata->getClassName() : null; } public function getPropertyName() { return $this->metadata instanceof \MailPoetVendor\Symfony\Component\Validator\Mapping\PropertyMetadataInterface ? $this->metadata->getPropertyName() : null; } public function getPropertyPath($subPath = '') { return \MailPoetVendor\Symfony\Component\Validator\Util\PropertyPath::append($this->propertyPath, $subPath); } public function markGroupAsValidated($cacheKey, $groupHash) { if (!isset($this->validatedObjects[$cacheKey])) { $this->validatedObjects[$cacheKey] = []; } $this->validatedObjects[$cacheKey][$groupHash] = \true; } public function isGroupValidated($cacheKey, $groupHash) { return isset($this->validatedObjects[$cacheKey][$groupHash]); } public function markConstraintAsValidated($cacheKey, $constraintHash) { $this->validatedConstraints[$cacheKey . ':' . $constraintHash] = \true; } public function isConstraintValidated($cacheKey, $constraintHash) { return isset($this->validatedConstraints[$cacheKey . ':' . $constraintHash]); } public function markObjectAsInitialized($cacheKey) { $this->initializedObjects[$cacheKey] = \true; } public function isObjectInitialized($cacheKey) { return isset($this->initializedObjects[$cacheKey]); } } 