<?php
 namespace MailPoetVendor\Symfony\Component\Validator\Constraints; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\Validator\Constraint; use MailPoetVendor\Symfony\Component\Validator\ConstraintValidator; use MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedTypeException; class BicValidator extends \MailPoetVendor\Symfony\Component\Validator\ConstraintValidator { public function validate($value, \MailPoetVendor\Symfony\Component\Validator\Constraint $constraint) { if (!$constraint instanceof \MailPoetVendor\Symfony\Component\Validator\Constraints\Bic) { throw new \MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedTypeException($constraint, \MailPoetVendor\Symfony\Component\Validator\Constraints\Bic::class); } if (null === $value || '' === $value) { return; } $canonicalize = \str_replace(' ', '', $value); if (!\in_array(\strlen($canonicalize), [8, 11])) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Bic::INVALID_LENGTH_ERROR)->addViolation(); return; } if (!\ctype_alnum($canonicalize)) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Bic::INVALID_CHARACTERS_ERROR)->addViolation(); return; } if (!\ctype_alpha(\substr($canonicalize, 0, 4))) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Bic::INVALID_BANK_CODE_ERROR)->addViolation(); return; } if (!\ctype_alpha(\substr($canonicalize, 4, 2))) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Bic::INVALID_COUNTRY_CODE_ERROR)->addViolation(); return; } if (\strtoupper($canonicalize) !== $canonicalize) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(\MailPoetVendor\Symfony\Component\Validator\Constraints\Bic::INVALID_CASE_ERROR)->addViolation(); return; } } } 