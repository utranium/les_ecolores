<?php
 namespace MailPoetVendor\Symfony\Component\DependencyInjection\ParameterBag; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use MailPoetVendor\Symfony\Component\DependencyInjection\Exception\RuntimeException; class EnvPlaceholderParameterBag extends \MailPoetVendor\Symfony\Component\DependencyInjection\ParameterBag\ParameterBag { private $envPlaceholders = []; private $providedTypes = []; public function get($name) { if (0 === \strpos($name, 'env(') && ')' === \substr($name, -1) && 'env()' !== $name) { $env = \substr($name, 4, -1); if (isset($this->envPlaceholders[$env])) { foreach ($this->envPlaceholders[$env] as $placeholder) { return $placeholder; } } if (!\preg_match('/^(?:\\w++:)*+\\w++$/', $env)) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException(\sprintf('Invalid %s name: only "word" characters are allowed.', $name)); } if ($this->has($name)) { $defaultValue = parent::get($name); if (null !== $defaultValue && !\is_scalar($defaultValue)) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\RuntimeException(\sprintf('The default value of an env() parameter must be scalar or null, but "%s" given to "%s".', \gettype($defaultValue), $name)); } } $uniqueName = \md5($name . \uniqid(\mt_rand(), \true)); $placeholder = \sprintf('env_%s_%s', \str_replace(':', '_', $env), $uniqueName); $this->envPlaceholders[$env][$placeholder] = $placeholder; return $placeholder; } return parent::get($name); } public function getEnvPlaceholders() { return $this->envPlaceholders; } public function mergeEnvPlaceholders(self $bag) { if ($newPlaceholders = $bag->getEnvPlaceholders()) { $this->envPlaceholders += $newPlaceholders; foreach ($newPlaceholders as $env => $placeholders) { $this->envPlaceholders[$env] += $placeholders; } } } public function setProvidedTypes(array $providedTypes) { $this->providedTypes = $providedTypes; } public function getProvidedTypes() { return $this->providedTypes; } public function resolve() { if ($this->resolved) { return; } parent::resolve(); foreach ($this->envPlaceholders as $env => $placeholders) { if (!$this->has($name = "env({$env})")) { continue; } if (\is_numeric($default = $this->parameters[$name])) { $this->parameters[$name] = (string) $default; } elseif (null !== $default && !\is_scalar($default)) { throw new \MailPoetVendor\Symfony\Component\DependencyInjection\Exception\RuntimeException(\sprintf('The default value of env parameter "%s" must be scalar or null, %s given.', $env, \gettype($default))); } } } } 