<?php
 namespace MailPoetVendor\Doctrine\DBAL\Types; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform; class ArrayType extends \MailPoetVendor\Doctrine\DBAL\Types\Type { public function getSQLDeclaration(array $fieldDeclaration, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return $platform->getClobTypeDeclarationSQL($fieldDeclaration); } public function convertToDatabaseValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return \serialize($value); } public function convertToPHPValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { if ($value === null) { return null; } $value = \is_resource($value) ? \stream_get_contents($value) : $value; $val = \unserialize($value); if ($val === \false && $value != 'b:0;') { throw \MailPoetVendor\Doctrine\DBAL\Types\ConversionException::conversionFailed($value, $this->getName()); } return $val; } public function getName() { return \MailPoetVendor\Doctrine\DBAL\Types\Type::TARRAY; } public function requiresSQLCommentHint(\MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return \true; } } 