<?php
 namespace MailPoetVendor\Doctrine\Common\Util; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Common\Collections\Collection; use MailPoetVendor\Doctrine\Common\Persistence\Proxy; final class Debug { private function __construct() { } public static function dump($var, $maxDepth = 2, $stripTags = \true, $echo = \true) { $html = \ini_get('html_errors'); if ($html !== \true) { \ini_set('html_errors', \true); } if (\extension_loaded('xdebug')) { \ini_set('xdebug.var_display_max_depth', $maxDepth); } $var = self::export($var, $maxDepth); \ob_start(); \var_dump($var); $dump = \ob_get_contents(); \ob_end_clean(); $dumpText = $stripTags ? \strip_tags(\html_entity_decode($dump)) : $dump; \ini_set('html_errors', $html); if ($echo) { echo $dumpText; } return $dumpText; } public static function export($var, $maxDepth) { $return = null; $isObj = \is_object($var); if ($var instanceof \MailPoetVendor\Doctrine\Common\Collections\Collection) { $var = $var->toArray(); } if (!$maxDepth) { return \is_object($var) ? \get_class($var) : (\is_array($var) ? 'Array(' . \count($var) . ')' : $var); } if (\is_array($var)) { $return = []; foreach ($var as $k => $v) { $return[$k] = self::export($v, $maxDepth - 1); } return $return; } if (!$isObj) { return $var; } $return = new \MailPoetVendor\stdclass(); if ($var instanceof \DateTimeInterface) { $return->__CLASS__ = \get_class($var); $return->date = $var->format('c'); $return->timezone = $var->getTimezone()->getName(); return $return; } $return->__CLASS__ = \MailPoetVendor\Doctrine\Common\Util\ClassUtils::getClass($var); if ($var instanceof \MailPoetVendor\Doctrine\Common\Persistence\Proxy) { $return->__IS_PROXY__ = \true; $return->__PROXY_INITIALIZED__ = $var->__isInitialized(); } if ($var instanceof \ArrayObject || $var instanceof \ArrayIterator) { $return->__STORAGE__ = self::export($var->getArrayCopy(), $maxDepth - 1); } return self::fillReturnWithClassAttributes($var, $return, $maxDepth); } private static function fillReturnWithClassAttributes($var, \stdClass $return, $maxDepth) { $reflClass = \MailPoetVendor\Doctrine\Common\Util\ClassUtils::newReflectionObject($var); $parsedAttributes = array(); do { $currentClassName = $reflClass->getName(); foreach ($reflClass->getProperties() as $reflProperty) { $attributeKey = $reflProperty->isPrivate() ? $currentClassName . '#' : ''; $attributeKey .= $reflProperty->getName(); if (isset($parsedAttributes[$attributeKey])) { continue; } $parsedAttributes[$attributeKey] = \true; $name = $reflProperty->getName() . ($return->__CLASS__ !== $currentClassName || $reflProperty->isPrivate() ? ':' . $currentClassName : '') . ($reflProperty->isPrivate() ? ':private' : '') . ($reflProperty->isProtected() ? ':protected' : ''); $reflProperty->setAccessible(\true); $return->{$name} = self::export($reflProperty->getValue($var), $maxDepth - 1); } } while ($reflClass = $reflClass->getParentClass()); return $return; } public static function toString($obj) { return \method_exists($obj, '__toString') ? (string) $obj : \get_class($obj) . '@' . \spl_object_hash($obj); } } 