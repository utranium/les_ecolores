<?php
 namespace MailPoetVendor\Doctrine\Common\Persistence\Mapping\Driver; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Common\Persistence\Mapping\ClassMetadata; use MailPoetVendor\Doctrine\Common\Persistence\Mapping\MappingException; class MappingDriverChain implements \MailPoetVendor\Doctrine\Common\Persistence\Mapping\Driver\MappingDriver { private $defaultDriver; private $drivers = []; public function getDefaultDriver() { return $this->defaultDriver; } public function setDefaultDriver(\MailPoetVendor\Doctrine\Common\Persistence\Mapping\Driver\MappingDriver $driver) { $this->defaultDriver = $driver; } public function addDriver(\MailPoetVendor\Doctrine\Common\Persistence\Mapping\Driver\MappingDriver $nestedDriver, $namespace) { $this->drivers[$namespace] = $nestedDriver; } public function getDrivers() { return $this->drivers; } public function loadMetadataForClass($className, \MailPoetVendor\Doctrine\Common\Persistence\Mapping\ClassMetadata $metadata) { foreach ($this->drivers as $namespace => $driver) { if (\strpos($className, $namespace) === 0) { $driver->loadMetadataForClass($className, $metadata); return; } } if (null !== $this->defaultDriver) { $this->defaultDriver->loadMetadataForClass($className, $metadata); return; } throw \MailPoetVendor\Doctrine\Common\Persistence\Mapping\MappingException::classNotFoundInNamespaces($className, \array_keys($this->drivers)); } public function getAllClassNames() { $classNames = []; $driverClasses = []; foreach ($this->drivers as $namespace => $driver) { $oid = \spl_object_hash($driver); if (!isset($driverClasses[$oid])) { $driverClasses[$oid] = $driver->getAllClassNames(); } foreach ($driverClasses[$oid] as $className) { if (\strpos($className, $namespace) === 0) { $classNames[$className] = \true; } } } if (null !== $this->defaultDriver) { foreach ($this->defaultDriver->getAllClassNames() as $className) { $classNames[$className] = \true; } } return \array_keys($classNames); } public function isTransient($className) { foreach ($this->drivers as $namespace => $driver) { if (\strpos($className, $namespace) === 0) { return $driver->isTransient($className); } } if ($this->defaultDriver !== null) { return $this->defaultDriver->isTransient($className); } return \true; } } 