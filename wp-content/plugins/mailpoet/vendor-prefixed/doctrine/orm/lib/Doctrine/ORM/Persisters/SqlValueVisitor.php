<?php
 namespace MailPoetVendor\Doctrine\ORM\Persisters; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\Common\Collections\Expr\ExpressionVisitor; use MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison; use MailPoetVendor\Doctrine\Common\Collections\Expr\Value; use MailPoetVendor\Doctrine\Common\Collections\Expr\CompositeExpression; class SqlValueVisitor extends \MailPoetVendor\Doctrine\Common\Collections\Expr\ExpressionVisitor { private $values = array(); private $types = array(); public function walkComparison(\MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison $comparison) { $value = $this->getValueFromComparison($comparison); $field = $comparison->getField(); $operator = $comparison->getOperator(); if (($operator === \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::EQ || $operator === \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::IS) && $value === null) { return; } else { if ($operator === \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::NEQ && $value === null) { return; } } $this->values[] = $value; $this->types[] = array($field, $value, $operator); } public function walkCompositeExpression(\MailPoetVendor\Doctrine\Common\Collections\Expr\CompositeExpression $expr) { foreach ($expr->getExpressionList() as $child) { $this->dispatch($child); } } public function walkValue(\MailPoetVendor\Doctrine\Common\Collections\Expr\Value $value) { return; } public function getParamsAndTypes() { return array($this->values, $this->types); } protected function getValueFromComparison(\MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison $comparison) { $value = $comparison->getValue()->getValue(); return $comparison->getOperator() == \MailPoetVendor\Doctrine\Common\Collections\Expr\Comparison::CONTAINS ? "%{$value}%" : $value; } } 