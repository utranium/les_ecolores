<?php
 namespace MailPoetVendor\Doctrine\ORM\Query; if (!defined('ABSPATH')) exit; class TreeWalkerChainIterator implements \Iterator, \ArrayAccess { private $walkers = array(); private $treeWalkerChain; private $query; private $parserResult; public function __construct(\MailPoetVendor\Doctrine\ORM\Query\TreeWalkerChain $treeWalkerChain, $query, $parserResult) { $this->treeWalkerChain = $treeWalkerChain; $this->query = $query; $this->parserResult = $parserResult; } function rewind() { return \reset($this->walkers); } function current() { return $this->offsetGet(\key($this->walkers)); } function key() { return \key($this->walkers); } function next() { \next($this->walkers); return $this->offsetGet(\key($this->walkers)); } function valid() { return \key($this->walkers) !== null; } public function offsetExists($offset) { return isset($this->walkers[$offset]); } public function offsetGet($offset) { if ($this->offsetExists($offset)) { return new $this->walkers[$offset]($this->query, $this->parserResult, $this->treeWalkerChain->getQueryComponents()); } return null; } public function offsetSet($offset, $value) { if (\is_null($offset)) { $this->walkers[] = $value; } else { $this->walkers[$offset] = $value; } } public function offsetUnset($offset) { if ($this->offsetExists($offset)) { unset($this->walkers[$offset]); } } } 