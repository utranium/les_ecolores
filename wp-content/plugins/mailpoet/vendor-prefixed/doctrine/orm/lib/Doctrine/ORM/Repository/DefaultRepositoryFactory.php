<?php
 namespace MailPoetVendor\Doctrine\ORM\Repository; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\EntityManagerInterface; final class DefaultRepositoryFactory implements \MailPoetVendor\Doctrine\ORM\Repository\RepositoryFactory { private $repositoryList = array(); public function getRepository(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $entityManager, $entityName) { $repositoryHash = $entityManager->getClassMetadata($entityName)->getName() . \spl_object_hash($entityManager); if (isset($this->repositoryList[$repositoryHash])) { return $this->repositoryList[$repositoryHash]; } return $this->repositoryList[$repositoryHash] = $this->createRepository($entityManager, $entityName); } private function createRepository(\MailPoetVendor\Doctrine\ORM\EntityManagerInterface $entityManager, $entityName) { $metadata = $entityManager->getClassMetadata($entityName); $repositoryClassName = $metadata->customRepositoryClassName ?: $entityManager->getConfiguration()->getDefaultRepositoryClassName(); return new $repositoryClassName($entityManager, $metadata); } } 