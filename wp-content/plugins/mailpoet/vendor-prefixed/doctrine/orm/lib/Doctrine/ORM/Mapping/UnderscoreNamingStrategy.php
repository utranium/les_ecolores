<?php
 namespace MailPoetVendor\Doctrine\ORM\Mapping; if (!defined('ABSPATH')) exit; class UnderscoreNamingStrategy implements \MailPoetVendor\Doctrine\ORM\Mapping\NamingStrategy { private $case; public function __construct($case = \CASE_LOWER) { $this->case = $case; } public function getCase() { return $this->case; } public function setCase($case) { $this->case = $case; } public function classToTableName($className) { if (\strpos($className, '\\') !== \false) { $className = \substr($className, \strrpos($className, '\\') + 1); } return $this->underscore($className); } public function propertyToColumnName($propertyName, $className = null) { return $this->underscore($propertyName); } public function embeddedFieldToColumnName($propertyName, $embeddedColumnName, $className = null, $embeddedClassName = null) { return $this->underscore($propertyName) . '_' . $embeddedColumnName; } public function referenceColumnName() { return $this->case === \CASE_UPPER ? 'ID' : 'id'; } public function joinColumnName($propertyName, $className = null) { return $this->underscore($propertyName) . '_' . $this->referenceColumnName(); } public function joinTableName($sourceEntity, $targetEntity, $propertyName = null) { return $this->classToTableName($sourceEntity) . '_' . $this->classToTableName($targetEntity); } public function joinKeyColumnName($entityName, $referencedColumnName = null) { return $this->classToTableName($entityName) . '_' . ($referencedColumnName ?: $this->referenceColumnName()); } private function underscore($string) { $string = \preg_replace('/(?<=[a-z])([A-Z])/', '_$1', $string); if ($this->case === \CASE_UPPER) { return \strtoupper($string); } return \strtolower($string); } } 