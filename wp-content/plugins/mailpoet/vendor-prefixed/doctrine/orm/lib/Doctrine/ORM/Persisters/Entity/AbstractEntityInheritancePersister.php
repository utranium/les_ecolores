<?php
 namespace MailPoetVendor\Doctrine\ORM\Persisters\Entity; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\Mapping\ClassMetadata; use MailPoetVendor\Doctrine\DBAL\Types\Type; abstract class AbstractEntityInheritancePersister extends \MailPoetVendor\Doctrine\ORM\Persisters\Entity\BasicEntityPersister { protected function prepareInsertData($entity) { $data = parent::prepareInsertData($entity); $discColumn = $this->class->discriminatorColumn; $this->columnTypes[$discColumn['name']] = $discColumn['type']; $data[$this->getDiscriminatorColumnTableName()][$discColumn['name']] = $this->class->discriminatorValue; return $data; } protected abstract function getDiscriminatorColumnTableName(); protected function getSelectColumnSQL($field, \MailPoetVendor\Doctrine\ORM\Mapping\ClassMetadata $class, $alias = 'r') { $tableAlias = $alias == 'r' ? '' : $alias; $columnName = $class->columnNames[$field]; $columnAlias = $this->getSQLColumnAlias($columnName); $sql = $this->getSQLTableAlias($class->name, $tableAlias) . '.' . $this->quoteStrategy->getColumnName($field, $class, $this->platform); $this->currentPersisterContext->rsm->addFieldResult($alias, $columnAlias, $field, $class->name); if (isset($class->fieldMappings[$field]['requireSQLConversion'])) { $type = \MailPoetVendor\Doctrine\DBAL\Types\Type::getType($class->getTypeOfField($field)); $sql = $type->convertToPHPValueSQL($sql, $this->platform); } return $sql . ' AS ' . $columnAlias; } protected function getSelectJoinColumnSQL($tableAlias, $joinColumnName, $className, $type) { $columnAlias = $this->getSQLColumnAlias($joinColumnName); $this->currentPersisterContext->rsm->addMetaResult('r', $columnAlias, $joinColumnName, \false, $type); return $tableAlias . '.' . $joinColumnName . ' AS ' . $columnAlias; } } 